# SPRAWDZANIE CZASU TRWANIA POLECENIA, SPRAWNDZANIE EFEKTYWNOSCI

# mozemy sami sprawdzac czas trwania wykrozystujac polecenie proc.time()
# trzecim elementem zwroconego wektora jest czas ktory minal od uruchomienia srodowiska
a1=proc.time()
a2=proc.time()
a2[3]-a1[3]
# dokladnie taka roznice robi funkcja  system.time(polecenie)
# mierzy ona czas od poczatku polecenia do konca tworzac 2x proc.time() - na poczatku i na koncu

# teraz sprawdzmy kilka mozliwosci uzupelnienia wektora elementami - i efektywnosc sposobow
#1 - ok. 10s
system.time({
  x=NULL;
  for (i in 1:10^5){
    x=c(x, runif(1))
  }
})

#2 - ok 10s
system.time({
  x=vector();
  for (i in 1:10^5){
    x=c(x, runif(1))
  }
})

#3 - ten zapis to jedyne 0.1-0.2s !!!! czyli ta konkatenacja z poprzednich sposob jest ZLYM ROZWIAZANIEM
system.time({
  x=vector();
  for (i in 1:10^5){
    x[i]=runif(1)
  }
})

#4 - ok 0.1-0.16s !!! - zdaje sie ze nieco szybciej niz poprzez zadeklarowanie pustego wektora
system.time({
  x=numeric(10^5);
  for (i in 1:10^5){
    x[i]=runif(1)
  }
})

#5 bez petli - zdecydowanie najszybszy sposob - czas ktory wskazuje to 0!
system.time({
  x=runif(10^5)
})

# A teraz! porownanie co do milisekudny + wykres pozniej
library(microbenchmark)
library(ggplot2)
# microbenchmark wykonuje wszystko 100razy domyslnie wiec troche to bedzie trwalo bardzo dlugo wiec sprwadzimy sb uproszczona wersje 
# ponizej, ktora zawiera p3, p4, p5
pomiary<-microbenchmark(
  p1={x=NULL; for (i in 1:10^5) x=c(x, runif(1))},
  p2={x=vector(); for (i in 1:10^5) x=c(x, runif(1))},
  p3={x=vector(); for (i in 1:10^5) x[i]=runif(1)},
  p4={x=numeric(10^5); for (i in 1:10^5) x[i]=runif(1)},
  p5={x=runif(10^5)}
)

pomiary2<-microbenchmark(
  p3={x=vector(); for (i in 1:10^5) x[i]=runif(1)},
  p4={x=numeric(10^5); for (i in 1:10^5) x[i]=runif(1)},
  p5={x=runif(10^5)}
)
pomiary2
autoplot(pomiary2)






