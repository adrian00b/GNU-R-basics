i_vector[j] = i
}
print(i_vector)
}
uniform1_iterations(10)
uniform2 <- function(){
a = c()
i = 1
while(max(a) < 90){
a[i] <- runif(1, 0, 100)
i <- i + 1
}
return(i - 1)
}
uniform2()
uniform2()
uniform2()
uniform2()
uniform2()
uniform2 <- function(){
a = c()
i = 1
while(max(a) < 90){
a[i] <- runif(1, 0, 100)
i <- i + 1
}
return(iterations <- i - 1)
}
uniform2()
iterations
uniform2 <- function(){
a = c()
i = 1
while(max(a) < 90){
a[i] <- runif(1, 0, 100)
i <- i + 1
}
return(iterations = i - 1)
}
uniform2()
iterations
uniform2 <- function(){
a = c()
i = 1
while(max(a) < 90){
a[i] <- runif(1, 0, 100)
i <- i + 1
}
return(i - 1)
}
class(uniform())
class(uniform2())
uniform1_iterations <- function(n){
i_vector = c()
for (j in 1:n){
i_vector[j] <- uniform2()
}
print(i_vector)
}
uniform1_iterations(10)
uniform1_iterations <- function(n){
i_vector = c()
for (j in 1:n){
i_vector[j] <- uniform2()
}
hist(i_vector)
}
uniform1_iterations(10)
uniform1_iterations(100)
uniform1_iterations <- function(n){
i_vector = c()
for (j in 1:n){
i_vector[j] <- uniform2()
}
return(i_vector)
}
uniform1_iterations(100) %>%
plot()
library(dplyr)
uniform1_iterations(100) %>%
plot()
uniform1_iterations(100) %>%
barplot()
?barplot
?hist
uniform1_iterations(100) %>%
hist(breaks = 100)
uniform1_iterations(100) %>%
hist(breaks = 10)
uniform1_iterations(100) %>%
hist(breaks = 50)
uniform1_iterations(100) %>%
hist()
uniform1_iterations(100) %>%
hist(10)
uniform1_iterations(1000) %>%
hist(10)
uniform1_iterations(1000) %>%
hist(20)
uniform1_iterations(1000) %>%
hist(100)
?hist
uniform1_iterations(1000) %>%
hist(100, labels = T)
?hist
uniform1_iterations(1000) %>%
hist(100, labels = T, right = F)
uniform1_iterations(1000) %>%
hist(100, labels = T)
uniform1_iterations(1000) %>%
hist(labels = T, breaks = 1)
uniform1_iterations(1000) %>%
hist(labels = T, breaks = 100)
uniform1_iterations(1000) %>%
hist(breaks = 100, labels = T, right = F)
uniform1_iterations(1000) %>%
hist(breaks = 100, labels = T, right = T)
uniform1_iterations(1000) %>%
hist(breaks = 1:100, labels = T, right = T)
uniform1_iterations(1000) %>%
hist(breaks = 1:100, labels = T, right = F)
a <- uniform1_iterations(1000)
a %>%
hist(breaks = 1:100, labels = T, right = T)
a %>%
hist(breaks = 1:100, labels = T, right = F)
?axis
axis(1, at = seq(1, 100, 5))
axis(1, at = seq(0, 100, 1))
axis(1, at = seq(0, 100, 5))
a %>%
hist(breaks = 1:100, labels = T, right = F)
axis(1, at = seq(0, 100, 5))
?axis
a
uniform2 <- function(){
a = c()
i = 1
while(max(a) < 99){
a[i] <- runif(1, 0, 100)
i <- i + 1
}
return(i - 1)
}
a <- uniform1_iterations(1000)
a %>%
hist(breaks = 1:100, labels = T, right = F)
axis(1, at = seq(0, 100, 5))
axis(1, at = seq(0, max(a), 5))
a %>%
hist(breaks = 1:max(a), labels = T, right = F)
axis(1, at = seq(0, max(a), 5))
a %>%
hist(breaks = seq(1:max(a), 2) , labels = T, right = F)
a %>%
hist(breaks = seq(1, max(a), 2) , labels = T, right = F)
seq(1, 5, 2)
seq(1, 6, 2)
a %>%
hist(breaks = seq(1, max(a), 2) , labels = T, right = F)
a %>%
hist(breaks = 100 , labels = T, right = F)
axis(1, at = seq(0, max(a), 5))
funkcja=function(x){
return(log(x))
}
funkcja(10)
# teraz dajm yargumenty ktore zwroca blad- wartosc minusowa, albo nienumeryczna
funkcja(-2)
traceback()
# traceback()  - pokaz nam jakie funkcje i z jakimi argumentami byly wywolywane w miejscu gdzie wystapil blad
funkcja('abc')
traceback()
loop1=function(j){
v=numeric(j);
for (i in seq_along(1:j)){
v[i]=i
}
return(v)
}
loop1(3)
debug(loop1)
loop1(4)
j
i
v
v
i
i
i
v
v
?sample
2 = any(1:10)
2=1:10
a = 1:10
a=2
2 == 1:10
any (2 == 1"10")
any (2 == 1:10)
any ('a' == 1:10)
'a' < 5
sampling1 <- function(n){
if(n >=1 AND n <= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n >=1 AND n <= 10) then{
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1 OR n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1  n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1 | n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1(4)
sampling1(12)
sampling1('a')
trunc(5.6)
simply_sample <- function(n){
a <- 1:10
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, 10))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
sample_indexes
}
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(8)
simply_sample(8)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
sample_indexes
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
v[sample_indexes]
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return([sample_indexes)
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 10)
max(1,2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v)){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
min(5m6)
min(5, 6)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v)){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 10)
sampling_algorithm(1:8, 10)
sampling_algorithm(1:8, 'a')
is.numeric(4)
is.numeric('a')
!is.numeric('a')
sampling_algorithm <- function(v, n){
if(!is.numeric(n)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 'a')
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 0)
sampling_algorithm <- function(v, n){
if(!(is.numeric(n) | n <= 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 0)
sampling_algorithm <- function(v, n){
if(!(is.numeric(n) | n > 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 0)
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 2)
sampling_algorithm <- function(v, n){
if((!(is.numeric(n)) | n <= 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 0)
sample2b=function(i,a){
if (i<1){
stop("Liczba losowanych elementów musi być większa lub równa 1")
} else if (i%%1!=0){
stop("Liczba losowanych elementów musi być liczbą całkowitą")
} else if (is.vector(a)==F){
stop("Nie podano poprawnego wektora")
} else if (i>length(a)){
stop("Liczba losowanych elementów nie może być większa od liczby elementów wektora")
}
v=numeric(i);
for (k in 1:i){
repeat{
v[k]=a[ceiling(runif(1,0,length(a)))]
if (all(v[k]!=v[1:k-1])){
break
}
}
}
return(v)
}
sample2b(3, 1:8)
sample2b(3, c(1,2,2,2,2))
is.vector(c(1,2,3))
sampling_algorithm <- function(v, n){
if((!(is.numeric(n)) | n <= 0)){
stop('Enter a valid arguments: n should be a positive number')
} else if (!is.vector(v)){
stop('Enter a valid arguments: v should be a vector')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 3)
sampling_algorithm(2, 3)
sampling_algorithm('a', 3)
is.vector('a')
