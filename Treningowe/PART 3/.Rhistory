2 == 1:10
any (2 == 1"10")
any (2 == 1:10)
any ('a' == 1:10)
'a' < 5
sampling1 <- function(n){
if(n >=1 AND n <= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n >=1 AND n <= 10) then{
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1 OR n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1  n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1 <- function(n){
if(n <= 1 | n >= 10){
stop('Podaj wartość z zakresu od 1 do 10')
}
return(sample(1:10, n))
}
sampling1(4)
sampling1(12)
sampling1('a')
trunc(5.6)
simply_sample <- function(n){
a <- 1:10
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, 10))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
sample_indexes
}
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(3)
simply_sample(8)
simply_sample(8)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
sample_indexes
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
v[sample_indexes]
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm(c(1,1,1,1,1), 2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return([sample_indexes)
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, 10)
max(1,2)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v)){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < n){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
min(5m6)
min(5, 6)
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v)){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm <- function(v, n){
sample_indexes <- c()
i <- 1
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 10)
sampling_algorithm(1:8, 10)
sampling_algorithm(1:8, 'a')
is.numeric(4)
is.numeric('a')
!is.numeric('a')
sampling_algorithm <- function(v, n){
if(!is.numeric(n)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 'a')
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 0)
sampling_algorithm <- function(v, n){
if(!(is.numeric(n) | n <= 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 0)
sampling_algorithm <- function(v, n){
if(!(is.numeric(n) | n > 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 0)
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 2)
sampling_algorithm <- function(v, n){
if((!(is.numeric(n)) | n <= 0)){
stop('Enter a valid value - n should be a positive number')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 2)
sampling_algorithm(1:8, -2)
sampling_algorithm(1:8, 0)
sample2b=function(i,a){
if (i<1){
stop("Liczba losowanych elementów musi być większa lub równa 1")
} else if (i%%1!=0){
stop("Liczba losowanych elementów musi być liczbą całkowitą")
} else if (is.vector(a)==F){
stop("Nie podano poprawnego wektora")
} else if (i>length(a)){
stop("Liczba losowanych elementów nie może być większa od liczby elementów wektora")
}
v=numeric(i);
for (k in 1:i){
repeat{
v[k]=a[ceiling(runif(1,0,length(a)))]
if (all(v[k]!=v[1:k-1])){
break
}
}
}
return(v)
}
sample2b(3, 1:8)
sample2b(3, c(1,2,2,2,2))
is.vector(c(1,2,3))
sampling_algorithm <- function(v, n){
if((!(is.numeric(n)) | n <= 0)){
stop('Enter a valid arguments: n should be a positive number')
} else if (!is.vector(v)){
stop('Enter a valid arguments: v should be a vector')
}
sample_indexes <- c()
i <- 1
# smaller than minimum for cases when n > length(v)
while(length(sample_indexes) < min(n, length(v))){
ind = ceiling(runif(1, 0, length(v)))
if(all(ind != sample_indexes)){
sample_indexes[i] <- ind
i <- i + 1
}
}
return(v[sample_indexes])
}
sampling_algorithm(1:8, 3)
sampling_algorithm(2, 3)
sampling_algorithm('a', 3)
is.vector('a')
v =vector();
for (i in 1:2000){
for (j in 1:2000){
v = c(v, i*j)
}
}
v = vector();
for (i in 1:200){
for (j in 1:200){
v = c(v, i*j)
}
}
how_many_end_numbers_1 = function(n){
v = vector();
for (i in 1:n){
for (j in 1:n){
v = c(v, i*j)
}
}
}
how_many_end_numbers_1(200)
v = vector();
how_many_end_numbers_1(200)
how_many_end_numbers_1 = function(n){
v = vector();
for (i in 1:n){
for (j in 1:n){
v = c(v, i*j)
}
}
return(v)
}
how_many_end_numbers_1(200)
v = how_many_end_numbers_1(200)
v = how_many_end_numbers_1(200)
how_many_end_numbers_1 = function(n){
v = vector();
for (i in 1:n){
for (j in 1:n){
v = c(v, i*j)
}
}
}
v = how_many_end_numbers_1(200)
how_many_end_numbers_1 = function(n){
v = vector();
for (i in 1:n){
for (j in 1:n){
v = c(v, i*j)
}
}
return(v)
}
v = how_many_end_numbers_1(200)
5 %% 2
10 %% 3
c(11,12) %% 10
summary(c(11,12) %% 10)
table(c(11,12) %% 10)
as.data.frame(table(c(11,12) %% 10))
how_many_end_numbers_1 = function(n){
v = vector();
for (i in 1:n){
for (j in 1:n){
v = c(v, i*j)
}
}
return(table(vmod = v %% 10))
}
v = how_many_end_numbers_1(200)
v
system.time(
v = how_many_end_numbers_1(200)
)
system.time({
v = how_many_end_numbers_1(200)
}
)
how_many_end_numbers_2 = function(n){
v = vector();
z = 0
for (i in 1:n){
for (j in 1:n){
v[z <- z + 1] = i*j
}
}
return(table(vmod = v %% 10))
}
system.time({
v = how_many_end_numbers_2(200)
}
)
v
# teraz z zadeklarowana wielksocia wektora
how_many_end_numbers_3 = function(n){
v = numeric(n^2);
z = 0
for (i in 1:n){
for (j in 1:n){
v[z <- z + 1] = i*j
}
}
return(table(vmod = v %% 10))
}
system.time({
v = how_many_end_numbers_3(200)
}
)
?outer
outer(1:3, 1:2)
outer(1:3, 1:2, fun = '*')
outer(1:3, 1:2, fun = "*")
outer(1:3, 1:2, FUN = "*")
outer(2:5, 1:2, FUN = "*")
table(outer(2:5, 1:2, FUN = "*"))
library(dplyr)
how_many_end_numbers_4 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
table %>%
return
}
system.time({
v = how_many_end_numbers_4(200)
}
)
how_many_end_numbers_5 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
tabularate %>%
return
}
system.time({
v = how_many_end_numbers_5(200)
}
)
how_many_end_numbers_5 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
tabulate %>%
return
}
system.time({
v = how_many_end_numbers_5(200)
}
)
v
v = how_many_end_numbers_5(2000)
v
# funkcje poliformiczne, czyli takie ktore dzialaja dla roznych klsa
# np funkcja plot - w zaleznosci jakiej klasy jest input to jej dzialanie jest inne
metods(plot)
# funkcje poliformiczne, czyli takie ktore dzialaja dla roznych klsa
# np funkcja plot - w zaleznosci jakiej klasy jest input to jej dzialanie jest inne
methods(plot)
rozmiar <- function(x){
UseMethod("rozmiar")
}
rozmiar.default <- function(x) {
length(x)
}
rozmiar.character <- function(x){
length(x)
}
rozmiar.default <- function(x) {
length(x)
}
rozmiar.character <- function(x){
length(x)
}
rozmiar.matrix <- function(x){
dim(x)[1] * dim(x)[2]
}
rozmiar.array <- function(x){
prod(dim(x))
}
rozmiar(matrix(1,2,3,4))
a = matrix(1,2,3,4)
a
?matrix
matrix(c(1,2,3,4))
a = matrix(c(1,2,3,4), 2, 2)
a
rozmiar(a)
letngth(a)
letngth(a)
length(a)
class(a)
?array
array(c(1:8), dim = c(2,2,2))
b = array(c(1:8), dim = c(2,2,2))
length(b)
b[1,1,1]
b[1,1,2]
b[2,1,1]
b
class(b)
lenght(b)
length(b)
rozmiar(b)
