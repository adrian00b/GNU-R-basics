}
)
how_many_end_numbers_2 = function(n){
v = vector();
z = 0
for (i in 1:n){
for (j in 1:n){
v[z <- z + 1] = i*j
}
}
return(table(vmod = v %% 10))
}
system.time({
v = how_many_end_numbers_2(200)
}
)
v
# teraz z zadeklarowana wielksocia wektora
how_many_end_numbers_3 = function(n){
v = numeric(n^2);
z = 0
for (i in 1:n){
for (j in 1:n){
v[z <- z + 1] = i*j
}
}
return(table(vmod = v %% 10))
}
system.time({
v = how_many_end_numbers_3(200)
}
)
?outer
outer(1:3, 1:2)
outer(1:3, 1:2, fun = '*')
outer(1:3, 1:2, fun = "*")
outer(1:3, 1:2, FUN = "*")
outer(2:5, 1:2, FUN = "*")
table(outer(2:5, 1:2, FUN = "*"))
library(dplyr)
how_many_end_numbers_4 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
table %>%
return
}
system.time({
v = how_many_end_numbers_4(200)
}
)
how_many_end_numbers_5 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
tabularate %>%
return
}
system.time({
v = how_many_end_numbers_5(200)
}
)
how_many_end_numbers_5 = function(n){
outer(1:n, 1:n, FUN = "*") %% 10 %>%
tabulate %>%
return
}
system.time({
v = how_many_end_numbers_5(200)
}
)
v
v = how_many_end_numbers_5(2000)
v
# funkcje poliformiczne, czyli takie ktore dzialaja dla roznych klsa
# np funkcja plot - w zaleznosci jakiej klasy jest input to jej dzialanie jest inne
metods(plot)
# funkcje poliformiczne, czyli takie ktore dzialaja dla roznych klsa
# np funkcja plot - w zaleznosci jakiej klasy jest input to jej dzialanie jest inne
methods(plot)
rozmiar <- function(x){
UseMethod("rozmiar")
}
rozmiar.default <- function(x) {
length(x)
}
rozmiar.character <- function(x){
length(x)
}
rozmiar.default <- function(x) {
length(x)
}
rozmiar.character <- function(x){
length(x)
}
rozmiar.matrix <- function(x){
dim(x)[1] * dim(x)[2]
}
rozmiar.array <- function(x){
prod(dim(x))
}
rozmiar(matrix(1,2,3,4))
a = matrix(1,2,3,4)
a
?matrix
matrix(c(1,2,3,4))
a = matrix(c(1,2,3,4), 2, 2)
a
rozmiar(a)
letngth(a)
letngth(a)
length(a)
class(a)
?array
array(c(1:8), dim = c(2,2,2))
b = array(c(1:8), dim = c(2,2,2))
length(b)
b[1,1,1]
b[1,1,2]
b[2,1,1]
b
class(b)
lenght(b)
length(b)
rozmiar(b)
"%op%" <- function(a, b) 2*a+3*b
1 %op% 1
wywolanie <- call('round', 1.59)
wywolanie
eval(wywolanie)
do.call('round', 1.59)
do.call('round', c(1.59, 1))
do.call('round', list(2))
do.call('round', list(2.59))
do.call('round', list(2.59, 1))
#wykorzystac mozna w ponizszy sposob
functions_name <- c('runif', 'norm', 'exp')
functions_name
?sapply(list, function)
?sapply
sapply(functions_name, FUN = do.call)
sapply(functions_name, FUN = do.call, list(3))
#wykorzystac mozna w ponizszy sposob
functions_name <- c('runif', 'rnorm', 'rexp')
sapply(functions_name, FUN = do.call, list(3))
example1 <- function(x = y){
y <- 2
return(x)
}
example1()
y = 1
example1()
example2 <- function(x = y){
x;
y <- 2;
return(x)
}
example2()
example2()
y = 100;
example2()
example1 <- function(a, b){
c = a + b
}
example1(2,4)
example1 <- function(a, b){
c = a + b
return(c)
}
example1(2,4)
example1 <- function(a, b){
c <<- a + b
return(c)
}
example1 <- function(a, b){
c = a + b
return(c)
}
example2 <- function(a, b){
c <<- a + b
return(c)
}
example(2,3)
example2(2,3)
c = 0;
example2 <- function(a, b){
c <<- a + b
return(c)
}
example2(2,3)
c = 0;
# w powyzszej funkcji symbol c jest pamietamy jedynie wewnatrz funkcji, jak widac w global environment nie zapisuje sie zmienna c
example1(2,4)
plot(1:100)
plot(liczby <- 1:100)
plot(liczby = 1:100)
ls()
rm(list = ls())
# tworzac funkcje, tworzy sie nowa przestrzen nazw!
fun_anon <- {
a = 0
f1 <- function(){
a
}
f2 <- function(){
a + 1
}
}
# tworzac funkcje, tworzy sie nowa przestrzen nazw!
fun_anon <- {function(){
a = 0
f1 <- function(){
a
}
f2 <- function(){
a + 1
}
}}()
# tworzac funkcje, tworzy sie nowa przestrzen nazw!
fun_anon <- {function(){
a = 0
f1 <- function(){
a
}
f2 <- function(){
a + 1
}
list(f1 = f1, f2 = f2)
}}()
fun_anon$f1()
fun_anon$f2()
fun_anon$f2()
fun_anon$f1()
fun_anon$f2()
class(fun_anon)
rejestr <- { function(){
licznik <- 0
get <- function() licznik
# tutaj stosujemy <<-, poniewaz chcemy zmienic wartosc obiektu licznik ktory jest w wyzszej przestrzeni nazw
set <- function(x) licznik <<- x
inc <- function() licznik <<- licznik + 1
list(get = get, set = set, inc = inc)
}
}
rejestr <- { function(){
licznik <- 0
get <- function() licznik
# tutaj stosujemy <<-, poniewaz chcemy zmienic wartosc obiektu licznik ktory jest w wyzszej przestrzeni nazw
set <- function(x) licznik <<- x
inc <- function() licznik <<- licznik + 1
list(get = get, set = set, inc = inc)
}}()
rejestr$get()
rejestr$set(5)
rejestr$get()
rejestr$inc()
rejestr$get()
rejestr$inc()
rejestr$get()
rejestr$set(5)
rejestr$get()
imie <- factor('Adrian')
summary(imie)
table(imie)
tabulate(imie)
class(imie)
mode(imie)
typeof(imie)
str(imie)
hist1 <- hist(1:10)
str(imie)
str(hist1)
fix(imie)
a1 = c(1:10)
fix(a1)
attributes(a1)
?tapply
install.packages('SmarterPoland')
library('SmarterPoland')
wypadkiWaska <- getEurostatRCV("tsdtr420")
wypadkiWaska <- getEurostatRCV("tsdtr420")
wypadkiWaska <- getEurostatRCV("sdg_11_40")
head(wypadkiWaska)
library(sqldf)
sqldf(
"
SELECT geo
, AVG(value) AS avg_value
FROM wypadkiWaska
GROUP BY geo
"
)
sqldf(
"
SELECT geo
, AVG(value) AS avg_value
FROM wypadkiWaska
GROUP BY geo
ORDER BY 1
"
)
sqldf(
"
SELECT geo
, AVG(value) AS avg_value
FROM wypadkiWaska
GROUP BY geo
ORDER BY 2 DESC
"
)
library(dplyr)
wypadkiWaska %>%
group_by() %>%
summarise(avg_value = AVG(value))
wypadkiWaska %>%
group_by() %>%
summarise(avg_value = mean(value))
group_by(wypadkiWaska, geo) %>%
summarise(avg_value = mean(value))
group_by(wypadkiWaska, geo) %>%
summarise(avg_value = mean(value)) %>%
arrange(desc(avg_value))
?tapply
tapply(wypadkiWaska$value, wypadkiWaska$geo, FUN = mean)
ex1 <- sqldf(
"
SELECT geo
, AVG(value) AS avg_value
FROM wypadkiWaska
GROUP BY geo
ORDER BY 2 DESC
"
)
class(ex1)
class(ex2)
ex2 <- group_by(wypadkiWaska, geo) %>%
summarise(avg_value = mean(value)) %>%
arrange(desc(avg_value))
class(ex2)
class(ex1)
class(ex2)
mode(ex2)
mode(ex1)
str(ex2)
class(ex3)
ex3 <- tapply(wypadkiWaska$value, wypadkiWaska$geo, FUN = mean)
class(ex3)
mode(ex3)
str(ex3)
head(ex3)
ex3[1]
ex2[1]
ex2[1, ]
?by
ex4 <- by(wypadkiWaska$value, wypadkiWaska$geo, FUN = mean)
ex4
class(ex4)
mode(ex4)
str(ex4)
?aggregate
# mozna tez uzyc funkcji aggregate
aggregate(wypadkiWaska$value, wypadkiWaska$geo, FUN = mean)
# mozna tez uzyc funkcji aggregate
aggregate(wypadkiWaska$value, by = list(wypadkiWaska$geo), FUN = mean)
wypadkiWaska$value > 1000
library('SmarterPoland')
wypadkiWaska <- getEurostatRCV("sdg_11_40")
installed.packages('plyr')
install.packages('plyr')
library('plyr')
# regresja w podzbiorach okreslonych zmienna geo
head(wypadkiWaska)
summary(wypadkiWaska)
?ddply
library(dplyr)
,(a)
.(a)
class(.(a))
a=.(a)
a
a[1]
a[[1]]
head(wypadkiWaska)
?lm
regre_v1 <- wypadkiWaska %>%
ddply(, .variables =  c('geo'),
.fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- wypadkiWaska %>%
ddply(, .variables =  .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
class(wypadkiWaska$time)
class(wypadkiWaska$type)
typeof(wypadkiWaska$type)
typeof(wypadkiWaska$time)
regre_v1 <- wypadkiWaska %>%
ddply(, .variables =  .(geo), .fun = function(X) lm(value ~ as.numeric(time), data = x)$coef)
regre_v1 <- ddply(wypadkiWaska, .variables =  .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(wypadkiWaska, .variables =  .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(wypadkiWaska, .variables =  .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(wypadkiWaska, .variables =  .(geo), .fun = function(X) lm(value ~ time, data = x)$coefficients)
head(wypadkiWaska)
?ddply
regre_v1 <- wypadkiWaska %>%
ddply(, .variables = .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply(, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply(, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply(, .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
ddply(wypadkiWaska, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
ddply(wypadkiWaska, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply(, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
library('dplyr')
regre_v1 <- wypadkiWaska %>%
ddply(, .(geo), .fun = summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
ddply(wypadkiWaska, .(geo), summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply( , .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply( , .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply( , .variables = .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v1 <- wypadkiWaska %>%
ddply( , .variables = .(geo),  summarize
, wspl_kier = lm(value ~ as.numeric(time))$coef[2]
, stala = lm(value ~ as.numeric(time))$coef[1]
, srednia = mean(value, na.rm = T))
ddply(wypadkiWaska, .(geo), summarize, mean = mean(value, na.rm = T))
summart(wypadkiWaska)
summary(wypadkiWaska)
library('plyr')
ddply(wypadkiWaska, .(geo), summarize, mean = mean(value, na.rm = T))
View(wypadkiWaska)
View(wypadkiWaska)
regre_v1 <- filter(wypadkiWaska, unit = 'NR') %>%
ddply(, .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = .(geo), .fun = function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(filter(wypadkiWaska, unit == 'NR'), .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(filter(wypadkiWaska, unit == 'NR'), .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- ddply(filter(wypadkiWaska, unit == 'NR'), c('geo'), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = c('geo'), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, c('geo'), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = .(geo), function(X) lm(value ~ time, data = x)$coef)
head(regre_v1)
library('dplyr')
regre_v1 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply(, .variables = .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1
regre_v1 <- ddply(filter(wypadkiWaska, unit == 'NR'), .variables = .(geo), function(X) lm(value ~ time, data = x)$coef)
regre_v1 <- wypadkiWaska %>%
ddply( , .variables = .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
regre_v2 <- filter(wypadkiWaska, unit == 'NR') %>%
ddply( , .variables = .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
head(regre_v2)
regre_v2 <-  ddply(filter(wypadkiWaska, unit == 'NR') , .variables = .(geo),  summarize
, wspl_kier = lm(value ~ time)$coef[2]
, stala = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
head(regre_v2)
# postac ax+b, oraz srednia
regre_v2 <-  ddply(filter(wypadkiWaska, unit == 'NR') , .variables = .(geo),  summarize
, a = lm(value ~ time)$coef[2]
, b = lm(value ~ time)$coef[1]
, srednia = mean(value, na.rm = T))
?line
lines(regre_v2)
