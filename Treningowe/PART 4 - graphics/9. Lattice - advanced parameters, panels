library(lattice)
library(latticeExtra)


head(iris)

xyplot(  Sepal.Width ~ Sepal.Length 
        , data = iris
        , groups = Species
        , pch = 16
)

xyplot( Sepal.Length ~ Sepal.Width | Species
  , data = iris
  , layout = c(3,1)
)

# change axes indepndently for each segment
# options: 
# "same"- the same range for axes, "free" - independetly range for each axe
# "sliced" - difference ranges but the same proportions (length of ranges?)

# sliced axis
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
          x = "sliced"
          , y = "sliced"
        )
)

# sliced x axis, the same y axis
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
          x = "sliced"
          , y = "same"
        )
)

# the proper form is using a relation parameter in lists for x and y
# if we want use sth to both axis, we can just add parameter without x and y specified
# more about SCALES
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
          relation = "sliced"
        )
)

# the code abow its the same as:
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
           x = list(relation = "sliced")
           , y = list(relation = "sliced")
        )
)

# draw par - determines whether to draw the axis
# ar parameter can be set for each panel independly as lsit
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
          x = list(relation = "sliced", at = list(seq(1,5,1), seq(1,5,0.5), seq(1,5,0.2)))
          , y = list(relation = "sliced", draw=F)
        )
)

# the same x axis, the same y axis
# also check the pch parameter - not only numbers but you can use also a string for this
xyplot( Sepal.Length ~ Sepal.Width | Species
        , data = iris
        , layout = c(3,1)
        , scales = list(
          x = "same"
          , y = "same"
        )
        , pch = '+'
        , cex = 1.3
)

################################################
# GRIDS - we can use package gridExtra of course (like i did before in AM)
# but it's also possible by using SPLIT(x, y, mx, my) and NEWPAGE = FALSE parameter

plot1 <- xyplot(Sepal.Length ~ Sepal.Width
  , data = iris       
)

plot(plot1, split = c (1,1,2,2))
plot(plot1, split = c (1,2,2,2), newpage = F)
plot(plot1, split = c (2,1,2,2), newpage = F)
plot(plot1, split = c (2,2,2,2), newpage = F)

# as we see it's create a grid mx columns and my rows

# unregular grid

plot(plot1, split = c (1,1,2,1))
plot(plot1, split = c (2,1,2,2), newpage = F)
plot(plot1, split = c (3,2,4,2), newpage = F)
plot(plot1, split = c (4,2,4,2), newpage = F)


# POSITION parameter , coordinates of left bottom corner and right upper corner
# mozna ustawic poistion tak aby wykresy na siebie nachodzily nawet!!!
plot(plot1, position = c(0,0,.8,.8))
plot(plot1, position = c(.5,.5,1,1), newpage = F)


# proporcje jednostek na osiach
# parametr ASPECT - reguluje proporcje jednostek na osiach ox i oy
# "fill" - domyslnie, "iso" - zachowanie proporcji
# "xy" - regula 45 stopni, do szeregow czasowych 

# domyslne
xyplot( MDRD12 ~ MDRD7
  , data=kidney
  , pch=19
  , aspect="fill"
)

# z zachowaniem proporcj
xyplot( MDRD12 ~ MDRD7
        , data=kidney
        , pch=19
        , aspect="iso"
)




















