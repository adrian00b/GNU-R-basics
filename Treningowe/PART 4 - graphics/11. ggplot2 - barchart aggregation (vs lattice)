library(Przewodnik)
library(lattice)
library(dplyr)
# AGREGACJE na przykladzie barchartow

head(countries)

# barchart with count statistics
# declare only x axis!

ggplot(countries, aes(continent)) +
  geom_bar(stat = "count")

# barchart with count in lattice package?
attach(countries)
countries_per_continnet = as_tibble(table(continent))

barchart( n ~ continent
  , data = countries_per_continnet
)

# what about average population?
ggplot(countries, aes(x = continent, y = population)) +
  geom_bar(stat = "summary", fun.y = "mean")

# in lattice first you should prepare data
avg_population_perc_continent <- 
  countries %>%
  group_by(continent) %>%
  summarise(avg_population = mean(population))

barchart( avg_population ~ continent
  , data = avg_population_perc_continent
)


# let's now add to these charts some cusomization
# with sorting

# LATTICE - need of sorting using a reorder function
avg_population_perc_continent$continent = reorder(avg_population_perc_continent$continent, desc(avg_population_perc_continent$avg_population))
barchart( avg_population ~ continent
  , data = avg_population_perc_continent
  , main = 'Average country population by continent [M]'
  , col = 'lightskyblue1'
  , ylim = c(-10, 95 * 10^3)
  , ylab = ""
  , box.width = 0.8
  , scales = list(
    x = list(cex = 1.05)
    , y = list(at = as.integer(seq(0, 100000, 10000)), abbreviate=T, minlength = 2)
  )
  , panel = function(...){
    panel.abline(h = seq(0, 10^5, 10^4), col = 'grey95')
    panel.barchart(...)
  }
)

# GGPLOT2
# zwrocmy uwage jak jest wykorzystana funkcja abbreviate - poprzez funkcje anonimowa!!!
ggplot(data = countries, aes(x=reorder(continent, desc(population)), y=population), xlab = '') +
  geom_hline(yintercept = 0, colour = 'grey95') +
  geom_bar(stat = 'summary'
           , fun.y = 'mean'
           , fill = 'lightskyblue1'
           , colour = 'grey60'
           , width = 0.8) +
  labs(title = 'Average country population by continent'
       , subtitle = 'y-axis: [M]'
       , x=''
       , y='') +
  coord_cartesian(ylim=c(0, 95 * 10^3)) +
  theme(axis.text.x = element_text(size=rel(1.4))
      , panel.border = element_rect(colour = 'black', fill = NA)
      , panel.background = element_rect(fill = 'white')
      , panel.grid.major.y = element_line(colour = 'grey95')
      #, panel.grid.minor = element_line(colour = 'grey95')
      , axis.line.x = element_line(colour = 'black')) +
  scale_y_continuous(breaks = seq(0, 10^5, 10^4)
                     , label = function(x) abbreviate(x, minlength = 2))



