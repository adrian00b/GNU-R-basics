)
barchart(n ~ wyksztalcenie | plec
, data = education_by_sex_tibble
)
daneSoc
education_by_sex_tibble <- as_tibble(table(wyksztalcenie, plec, praca))
barchart(n ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = praca
)
barchart(n ~ wyksztalcenie
, data = education_by_sex_tibble
, groups = plec
)
barchart(n ~ wyksztalcenie
, data = education_by_sex_tibble
, groups = plec
, auto.key = T
)
barchart(n ~ wyksztalcenie
, data = education_by_sex_tibble
, groups = plec
, auto.key = list(columns = 2)
)
barchart(n ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = praca
, auto.key = list(columns = 2)
)
dotplot(n ~ wyksztalcenie
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(n ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
education_by_sex_tibble
dotplot(sum(n) ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(sum(n) ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = wyksztalcenie
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(sum(n) ~ wyksztalcenie
, data = education_by_sex_tibble
, groups = wyksztalcenie
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(~ wyksztalcenie
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(~ n | wyksztalcenie
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
dotplot(~ sum(n)
, data = education_by_sex_tibble
, groups = F
, origin = 0
, type = c('p', 'h')
, lw = 3
)
barchart(n ~ wyksztalcenie | plec
, data = education_by_sex_tibble
, groups = praca
, auto.key = list(columns = 2)
)
x * c(1,2,3)
c(1,2,3) * 4
c(1,2,3) * x
c(1,2,3) * 'x'
paste("x", 1:5)
paste("x", 1:5, sep = "")
# PARALLEL function
test <- tibble(
var = paste(c("x"), 1:5)
)
var = paste(c("x"), 1:5)
var
var[1]
# PARALLEL function
test <- tibble(
var = paste("x", 1:5, sep = "")
)
var = paste("x", 1:5, sep = "")
var
var[1]
# PARALLEL function
test <- tibble(
var = paste("x", 1:5, sep = "")
, a = 1:5
, b = 10:6
, c = c(4, 5, 3, 4, 2)
)
parallel(
~ a + b + c
data = test
)
parallel(
~ a + b + c
, data = test
)
parallelplot(
~ a + b + c
, data = test
)
?parallelplot
parallelplot(
~ a
, data = test
)
parallelplot(
~ data[, 2:5]
, data = test
)
parallelplot(
~ data[, c(2:5)]
, data = test
)
parallelplot(
~ test[, c(2:5)]
, test = test
)
parallelplot(
~ test[, c(2:4)]
, test = test
)
parallelplot(
~ test[, c(2:4)]
, test = test
, horizontal.axis = F
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
)
parallelplot(
~ a, b, c
, data = test
, horizontal.axis = F
)
parallelplot(
~ c(a, b, c)
, data = test
, horizontal.axis = F
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
, alpha = 0.2
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
, alpha = 0.8
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
x = list(rot = 4)
)
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
x = list(rot = 50)
)
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
x = list(rot = 0)
)
)
parallelplot(
~ test[, c(2:4)]
, horizontal.axis = F
, groups = a < 3
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
# rot - rotacja !
x = list(rot = 0)
)
)
parallelplot(
~ test[, c(2:4)]
, data = test
, horizontal.axis = F
, groups = a < 3
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
# rot - rotacja !
x = list(rot = 0)
)
)
parallelplot(
~ test[, c(2:4)]
, data = test
, horizontal.axis = F
, groups = a < 3
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
# rot - rotacja !
x = list(rot = 0)
)
, auto.key = T
)
parallelplot(
~ test[, c(2:4)]
, data = test
, horizontal.axis = F
, groups = a < 3
# par alpha - wyjasnienie
#, alpha = 0.8
, scales = list(
# rot - rotacja !
x = list(rot = 0)
)
, auto.key = list(columns = 2)
)
library(lattice)
library(PBImisc)
head(kidney)
histogram( ~ recipient.age
data = kidney
)
library(lattice)
library(PBImisc)
histogram( ~ recipient.age
data = kidney
)
histogram( ~ recipient.age
, data = kidney
)
# jadrowy estymator gestosci - also in file no 4 :
densityplot( ~ recipient.age
, data = kidney
)
library(latticeExtra)
ecdf( ~ recipient.age
, data = kidney
)
ecdfplot( ~ recipient.age
, data = kidney
)
head(kidney)
ecdfplot( ~ recipient.age | diabetes
, data = kidney
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, auto.key = list(columns = 2)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "p"
, auto.key = list(columns = 2)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "l"
, auto.key = list(columns = 2)
)
ecdf(
kidney$recipient.age
)
plot(
ecdf(
kidney$recipient.age
)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "p"
, auto.key = list(columns = 2)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "l"
, auto.key = list(columns = 2)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "smooth"
, auto.key = list(columns = 2)
)
ecdfplot( ~ recipient.age
, data = kidney
, groups = diabetes
, type = "l"
, auto.key = list(columns = 2)
)
density(kidney$recipient.age)
dens <- density(kidney$recipient.age)
dens <- tibble(
x = dens$x
, y = dens$y
)
library(tibble)
dens <- tibble(
x = dens$x
, y = dens$y
)
View(dens)
View(dens)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)
)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "red"
)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
dens <- density(kidney$recipient.age, adjust = 1)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
dens <- density(kidney$recipient.age, adjust = 0.1)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
range(kidney$recipient.age)
diff(range(kidney$recipient.age))
# extend range of density
e <- 0.1 * diff(range(kidney$recipient.age))
dens <- density(kidney$recipient.age
, adjust = 1
, from = min(kidney$recipient.age) - e
, to = max(kidney$recipient.age) + e
)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
dens <- density(kidney$recipient.age
, adjust = 0.1
, from = min(kidney$recipient.age) - e
, to = max(kidney$recipient.age) + e
)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
plot(
ecdf(
kidney$recipient.age
)
, type = "l"
)
plot(
ecdf(
kidney$recipient.age
)
#, type = "l"
)
plot(
ecdf(
kidney$recipient.age
)
, type = "l"
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
dens <- density(kidney$recipient.age
# adjust parameter (bw, bandwidth) - im wiekszy tym wieksze dopasowanie krzywej (np. dla 0.1 duzo bardziej dopasowne)
, adjust = 1
, from = min(kidney$recipient.age) - e
, to = max(kidney$recipient.age) + e
)
dens <- tibble(
x = dens$x
, y = dens$y
, y_ecdf = cumsum(dens$y)/sum(dens$y)
)
xyplot( y_ecdf ~ x
, data = dens
, type = "l"
, lw = 2
) + as.layer(
ecdfplot( ~ recipient.age
, data = kidney
, col = "orangered"
)
)
