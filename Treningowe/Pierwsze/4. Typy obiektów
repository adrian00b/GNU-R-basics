> # teraz zwrocimy uwagê na obiekty  i TYPY OBIEKTÓW wystêpuj¹cych w R
> 
> # TYP LICZBOWY 
> a=5
> b=5.5
> 
> # TYP ZNAKOWY
> string="To jest napis"
> string
[1] "To jest napis"
> string2="+ napis doklejony"
> paste(string," ", string2)
[1] "To jest napis   + napis doklejony"
> paste(string, string2)
[1] "To jest napis + napis doklejony"
> # czyli paste to operator konkatencacji, uwaga!, wstawia spacje pomiedzy stringi
> 
> 
> # TYP LOGICZNY
> TRUE
[1] TRUE
> T
[1] TRUE
> FALSE
[1] FALSE
> F
[1] FALSE
> 1==2
[1] FALSE
> 1==1
[1] TRUE
> 2>4
[1] FALSE
> (2==2)+2
[1] 3
> # zwrocmy uwage ze w ostatnim przykladzie nastepuje automatyczna konwersja wartosci typu logicznego na liczbe
> 
> T+2
[1] 3
> TRUE+2
[1] 3
> 2!=3
[1] TRUE
> !(2==2)
[1] FALSE
> (2==2) | (2==3)
[1] TRUE
> (2==2) & (2==3)
[1] FALSE
> # czyli jak widzimy negacja !, koniunkcja &, alternatywa | 
> 
> # WEKTOR ELEMENTÓW
> # wektor deklarujemy przy u¿yciu funkcji c
> c=(1,2,3,4,5,122)
B£¥D: nieoczekiwane ',' in "c=(1,"
> a=c(1,2,3,100)
> a
[1]   1   2   3 100
> b=c(1:100)
> b
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38
 [39]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76
 [77]  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100
> # elementy wektora mozmey nazywac
> a=(pierwszy=11, drugi=12, trzeci=13)
B£¥D: nieoczekiwane ',' in "a=(pierwszy=11,"
> a=c(pierwszy=11, drugi=12, trzeci=13)
> a
pierwszy    drugi   trzeci 
      11       12       13 
> pierwszy
B£¥D: nie znaleziono obiektu 'pierwszy'
> a[pierwszy]
B£¥D: nie znaleziono obiektu 'pierwszy'
> a[1]
pierwszy 
      11 
> a=c(1:6)
> a
[1] 1 2 3 4 5 6
> mean(a)
[1] 3.5
> # mean to srednia wartosc wektora
> # UWAGA! NA - ang( not avaliable) typ danych ktory oznacza brak wartosci
> b=(1:6, NA)
B£¥D: nieoczekiwane ',' in "b=(1:6,"
> b=c(1:6, NA)
> b
[1]  1  2  3  4  5  6 NA
> mean(b)
[1] NA
> # zauwazmy ze srednia z wektora zawierajacego NA to tez NA, bo co program ma zrobic z brakujaca wartosci?
> mean(b, na.rm=TRUE)
[1] 3.5
> # mozna podac dodatkowy argument na.rm = TRUE, ktory pomija brakuajce wartosci
> mean(b, na.rm=F)
[1] NA
> # domyslnie wartosc tego argumentu ustawiona jest na FALSE
> 
> complete.cases(b)
[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
> # funkcja ktora sprwadza ktory elementy wektora sa znana wartoscia a ktore NA
> # mozna usunac elementy w ktorych ejst wartosc NA stosujac funkcje na.omit(wektor)
> na.omit(b)
[1] 1 2 3 4 5 6
attr(,"na.action")
[1] 7
attr(,"class")
[1] "omit"
> c=na.omit(b)
> c
[1] 1 2 3 4 5 6
attr(,"na.action")
[1] 7
attr(,"class")
[1] "omit"
> c<-na.omit(b)
> c
[1] 1 2 3 4 5 6
attr(,"na.action")
[1] 7
attr(,"class")
[1] "omit"
> c+1
[1] 2 3 4 5 6 7
attr(,"na.action")
[1] 7
attr(,"class")
[1] "omit"
> # nalezy zauwazyc ze wektor musi skladac sie z elementow tego samego typu
> c("a","b","c")
[1] "a" "b" "c"
> c("a",2)
[1] "a" "2"
> a=c(a,2)
> a
[1] 1 2 3 4 5 6 2
> a=c("a",2)
> a
[1] "a" "2"
> a+1
B³¹d w poleceniu 'a + 1':
  argument nieliczbowy przekazany do operatora dwuargumentowego
> # jak widzimy liczby sa automatycznie konwertowane na STRING
> 
> 
> # LISTA - podobnie jak wektor rowniez jest to uporzadkowany zbior elementow, tutaj jednak moga byc elementy roznych typow
> l=list("Adrian", "Brodowicz", 10, TRUE)
> l
[[1]]
[1] "Adrian"

[[2]]
[1] "Brodowicz"

[[3]]
[1] 10

[[4]]
[1] TRUE

> l[[1]]
[1] "Adrian"
> !l[[4]]
[1] FALSE
> l=list(name="Adrian", lastname="Brodowicz", age=10, student=TRUE)
> l
$`name`
[1] "Adrian"

$lastname
[1] "Brodowicz"

$age
[1] 10

$student
[1] TRUE

> 
> #czasami w wektorach mamy tylko kilka dozwolonych wartosci, wtedy dobrze uzyc tzw. TYPU CZYNNIKOWEGO
> # zajmuja mniej miejsca w pamieci
> # >factor(())
> # to przechowuje wartossci w kilku kategoriach jakby
> 
> f=factor(c("a","b","a","a","d","b"))
> f
[1] a b a a d b
Levels: a b d
> summary(l)
         Length Class  Mode     
name     1      -none- character
lastname 1      -none- character
age      1      -none- numeric  
student  1      -none- logical  
> summary(f)
a b d 
3 2 1 
> 
> 
> #MACIERZE
> matrix(0,4,5)
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    0    0    0    0    0
[3,]    0    0    0    0    0
[4,]    0    0    0    0    0
> a=matrix(1:6,2,3)
> a
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> a[1,1]
[1] 1
> a[1,]
[1] 1 3 5
> # RAMKA DANYCH 
> # mozna traktowac jak liste wektoro tej samej dlugosci, troche jak table danych po prostu
> ramka=data.frame(id=c(1,2,3), name=("Adrian", "Kamil", "Piotr"), weight=(77,100,56), student=(T,T,F))
B£¥D: nieoczekiwane ',' in "ramka=data.frame(id=c(1,2,3), name=("Adrian","
> ramka=data.frame(id=c(1,2,3), name=c("Adrian", "Kamil", "Piotr"), weight=c(77,100,56), student=c(T,T,F))
> ramka
  id   name weight student
1  1 Adrian     77    TRUE
2  2  Kamil    100    TRUE
3  3  Piotr     56   FALSE
> ramka$id
[1] 1 2 3
> ramka$name
[1] Adrian Kamil  Piotr 
Levels: Adrian Kamil Piotr
> ramka[1,]
  id   name weight student
1  1 Adrian     77    TRUE
> ramka[,3]
[1]  77 100  56
> 
