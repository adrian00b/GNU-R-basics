)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, lab = c(20, 10)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, lab = c(20, 10, 1)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, lty = c (1,10)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, lty = c (1,10)
, tcl = 0.5
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, tcl = 0.5
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, xaxp = c(1,10,1)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, xaxp = c(1, 10, 10)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, xaxp = c(1, 10, 9)
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, xaxp = c(1, 10, 9)
, main = 'Uniform distribution histogram'
, xlab = 'Number'
, ylab = 'Probability'
)
hist(uniform_sample
, breaks = 10
, las = 1
, probability = T
, xlim = c(1, 10)
, cex.axis = 0.8
, xaxp = c(1, 10, 9)
, main = 'Uniform distribution histogram'
, xlab = 'Number'
, ylab = 'Probability'
, col = 'grey'
, border = 'white'
)
library(dplyr)
library(Przewodnik)
head(auta)
Sys.Date()
as.Date(Sys.Date(), "%Y")
as.Date(Sys.Date(), "%Y")
format(Sys.Date(), "%Y")
auta %>%
summarise(
avg_price = mean(auta$Cena)
, med_mileage = median(auta$Przebieg)
, avg_age = mean(format(Sys.Date(), "%Y") - auta$Produkcja)
, sample = n()
)
as.Date(Sys.Date(), "%Y") - 1
as.Date(Sys.Date(), "%Y") - 1
format(Sys.Date(), "%Y")
format(Sys.Date(), "%Y")-1
auta %>%
summarise(
avg_price = mean(auta$Cena)
, med_mileage = median(auta$Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - auta$Produkcja)
, sample = n()
)
library(sqldf)
sqldf(SELECT *
FROM auta)
sql(SELECT *
FROM auta)
sqldf("SELECT *
FROM auta")
auta %>%
summarise(
avg_price = mean(auta$Cena)
, med_mileage = median(auta$Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - auta$Produkcja)
, sample = n()
)
sqldf("
SELECT AVG(Cena) AS avg_price
, MEDIAN(Przebieg) AS med_milea
FROM auta
")
sqldf("
SELECT AVG(Cena) AS avg_price
, MEDIAN(Przebieg) AS med_milea
, MAX(TODAY())
FROM auta
")
sqldf(
"
SELECT date('now')
"
)
sqldf(
"
SELECT date('%Y%, 'now')
"
)
sqldf(
"
SELECT date('%Y', 'now')
"
)
sqldf(
"
SELECT date('y', 'now')
"
)
sqldf(
"
SELECT date('now')
"
)
sqldf(
"
SELECT date('now', '%y)
"
)
sqldf(
"
SELECT date('now', '%y')
"
)
sqldf(
"
SELECT date('now', '%Y')
"
)
sqldf(
"
SELECT strftime('%Y', 'now')
"
)
sqldf(
"
SELECT strftime('%Y', 'now') - 2
"
)
# funkcje dat w RSQLite https://www.sqlite.org/lang_datefunc.html
sqldf("
SELECT AVG(Cena) AS avg_price
, MEDIAN(Przebieg) AS med_milea
, AVG(strftime('%Y', 'now') - Produkcja) AS avg_age
, COUNT(*) AS sample
FROM auta
")
auta %>%
summarise(
avg_price = mean(auta$Cena)
, med_mileage = median(auta$Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - auta$Produkcja)
, sample = n()
)
auta %>%
group_by(Marka) %>%
summarise(
avg_price = mean(auta$Cena)
, med_mileage = median(auta$Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - auta$Produkcja)
, sample = n()
)
auta %>%
summarise(
avg_price = mean(Cena)
, med_mileage = median(Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - Produkcja)
, sample = n()
)
auta %>%
group_by(Marka) %>%
summarise(
avg_price = mean(Cena)
, med_mileage = median(Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - Produkcja)
, sample = n()
)
auta %>%
group_by(Marka) %>%
summarise(
avg_price = mean(Cena)
, med_mileage = median(Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - Produkcja)
, sample = n()
) %>%
arrange(avg_price)
auta %>%
group_by(Marka) %>%
summarise(
avg_price = mean(Cena)
, med_mileage = median(Przebieg)
, avg_age = mean(as.numeric(format(Sys.Date(), "%Y")) - Produkcja)
, sample = n()
) %>%
arrange(desc(avg_price))
sqldf("
SELECT AVG(Cena) AS avg_price
, MEDIAN(Przebieg) AS med_milea
, AVG(strftime('%Y', 'now') - Produkcja) AS avg_age
, COUNT(*) AS sample
FROM auta
GROUP BY Marka
ORDER BY avg_price DESC
")
sqldf("
SELECT Marka
, AVG(Cena) AS avg_price
, MEDIAN(Przebieg) AS med_milea
, AVG(strftime('%Y', 'now') - Produkcja) AS avg_age
, COUNT(*) AS sample
FROM auta
GROUP BY Marka
ORDER BY avg_price DESC
")
library(ggplot2)
arrange(Marki, desc(AvgPrice)) %>%
ggplot(aes(factor(Marka), AvgPrice, Amount)) +
geom_bar(stat="identity", position = "dodge", col="red", fill="red")
barplot(Marki$AvgPrice, names.arg = Marki$Marka, ylab="Average Price", xlab="Mark", ylim=c(0,60000))
group_by(auta,Marka) %>%
summarise(AvgPrice=mean(Cena), MedMileage=median(Przebieg), AvgAge=mean(2019-Produkcja), Amount=n()) %>%
arrange(desc(AvgPrice))->Marki
barplot(Marki$AvgPrice, names.arg = Marki$Marka, ylab="Average Price", xlab="Mark", ylim=c(0,60000))
barplot(Marki$AvgPrice, Marki$Amount, names.arg = Marki$Marka, ylab="Average Price", xlab="Mark", ylim=c(0,60000))
library(ggplot2)
arrange(Marki, desc(AvgPrice)) %>%
ggplot(aes(factor(Marka), AvgPrice, Amount)) +
geom_bar(stat="identity", position = "dodge", col="red", fill="red")
arrange(Marki, desc(AvgPrice)) %>%
ggplot(aes(x=Marka, y=AvgPrice)) +
geom_bar(stat="identity", position = "dodge", col="red", fill="red") ->p
b1<-barplot(Marki$AvgPrice, names.arg = Marki$Marka, ylab="Average Price", xlab="Mark", ylim=c(0,60000))
b2<-barplot(Marki$Amount, names.arg = Marki$Marka, ylab="Amount", xlab="Mark")
auta %>%
select(Marka, Cena, Przebieg) %>%
group_by(Marka) %>%
mutate(Przebieg = Przebieg/mean(Przebieg))
sqldf(
"
SELECT Marka
, Cena
, Przebieg / AVG(Przebieg) OVER (PARTITION BY Marka)
FROM auta
"
)
sqldf(
"
SELECT Marka
, Cena
, Przebieg / AVG(Przebieg) OVER (PARTITION BY Marka) AS normalized_mileage
FROM auta
"
)
sqldf(
"
SELECT Marka
, Cena
, ROUND(Przebieg / AVG(Przebieg) OVER (PARTITION BY Marka), 2) AS normalized_mileage
FROM auta
"
)
(eurostat)
install.packages("eurostat", dependencies = T)
getEurostatRaw('tdsr210')
?getEurostatRaw
getEurostatRaw('t2020_rk310')
# pobieramy dane z eurostatu
data1=get_eurostat("t2020_rk310", time_format = "num")
?read.csv2
read.csv2('7/to_spread.csv')
to_spread <- read.csv2('7/to_spread.csv')
?spread
library(tidyr)
?spread
to_spread %>%
spread(year)
to_spread %>%
spread(year)
spread(to_spread, year)
to_spread <- read.csv2('7/to_spread.csv')
spread(to_spread, to_spread)
open('7/to_spread.csv')
openFile('7/to_spread.csv')
file.edit('7/to_spread.csv')
to_spread <- read.csv2('7/to_spread.csv')
to_spread
spread(to_spread, to_spread)
spread(to_spread, year)
spread(to_spread, to_spread$year)
spread(to_spread, year, value)
spread(to_spread, country, value)
library(tidyr)
ls
pwd
cwd
cd
to_spread <- read.csv2('7/to_spread.csv')
View(to_spread)
View(to_spread)
spread(to_spread)
library(tidyr)
spread(to_spread)
library('tidyr')
library("tidyr")
install.packages("tidyr")
library("tidyr")
?spread
spread(to_spread, year, value)
pivot_wider(to_spread, year, value)
?pivot_wider
pivot_wider(to_spread, names_from = year, values_from = value)
pivot_wider(to_spread, names_from = year, values_from = value)
write.csv("", '7/to_spread2.csv')
file.edit('7/to_spread2.csv')
to_spread <- read.csv2('7/to_spread.csv')
# funkcja pozwalająca edytować zawartosc pliku
file.edit('7/to_spread.csv')
# funkcja pozwalająca edytować zawartosc pliku
file.edit('7/to_spread.csv')
to_spread2 <- read.csv2('7/to_spread2.csv')
file.edit('7/to_spread2.csv')
to_spread2 %>%
pivot_wider(names_from = year, values_from = c(value, value2))
to_spread2 %>%
pivot_wider(names_from = year, values_from = c(value, value2)) -> t1
filter(t1, country == 'A')
head(t1)
filter(t1, t1$country = 'A')
filter(t1, country == 'A')
?filter
library(dplyr)
filter(t1, country == 'A')
write,csv(t1, "7/to_gather.csv")
write.csv(t1, "7/to_gather.csv")
t2 <- spread(to_spread, country, value)
write.csv(t2, "7/to_gather.csv")
?gather
t2
gather(t2, '1999', '2000', '2001', key = 'year', value = value)
gather(t2, 1999, 2000, 2001, key = 'year', value = value)
gather(t2, 'A', 'B', key = country, value = value )
gather(t2, 'A', 'B', key = 'Country', value = value )
gather(t2, 'A', 'B', key = 'country', value = 'value' )
?pivot_longer
t2
pivot_longer(t2, cols = c('A', 'B'), names_to = 'country', values_to = 'value')
to_concat <- tibble( a = c('a', 'b', 'c')
id = 1:4)
to_concat <- tibble( a = c('a', 'b', 'c')
, id = 1:4)
to_concat <- tibble( a = c('a', 'b', 'c')
, id = 1:3)
to_concat
to_concat %>%
unite(a, id)
to_concat %>%
unite('a_id', 'a', 'id')
to_concat %>%
unite('aid', 'a', 'id')
to_concat %>%
unite('a_id', 'a', 'id', sep = "")
?unite
to_parse <- tibble(
date = c('2019-01-01', '2019-08-03', '2018-12-16')
id = 1:3
)
to_parse <- tibble(
date = c('2019-01-01', '2019-08-03', '2018-12-16')
, id = 1:3
)
to_parse %>%
separate('date', sep = '-', into = c('year', 'month', 'day'))
to_parse_2 <- tibble(
date = c('2019-01-01', '2019-08-03', '2018-12')
, id = 1:3
)
to_parse %>%
separate('date', sep = '-', into = c('year', 'month', 'day'))
to_parse_2 %>%
separate('date', sep = '-', into = c('year', 'month', 'day'))
?separate
missing_values <- tibble (
id = 1:6
name = c('a', 'b', 'c', '', 'e'. '')
)
missing_values <- tibble (
id = 1:6
, name = c('a', 'b', 'c', '', 'e', '')
)
missing_values
missing_values <- tibble (
id = 1:6
, name = c('a', 'b', 'c', NA, 'e', NA)
)
missing_values
drop_na(missing_values)
replace_na(missing_values, 'NULL')
replace_na(missing_values, c('id','NULL'))
replace_na(missing_values, list = ('NULL'))
replace_na(missing_values, list(name = 'NULL'))
fill(missing_values, direction = c('down', 'down'))
?fill
fill(missing_values, .direction = c('down', 'down'))
fill(missing_values, .direction = c('down'))
fill(missing_values, name ,.direction = c('down'))
fill(missing_values, name, .direction = c('down'))
missing_values_2 <- missing_values[, 3] = c(11, 12, NA, 14, NA, 16)
missing_values_2 <- (missing_values[, 3] = c(11, 12, NA, 14, NA, 16))
missing_values_2
?add_column
missing_values_2 <- add_column(value = c(11, 12, NA, 14, NA, 16))
library(tibble)
to_spread <- read.csv2('7/to_spread.csv')
missing_values_2 <- add_column(value = c(11, 12, NA, 14, NA, 16))
missing_values_2 <- add_column(missing_values, value = c(11, 12, NA, 14, NA, 16))
missing_values_2
missing_value
missing_values
missing_values <- tibble (
id = 1:6
, name = c('a', 'b', 'c', NA, 'e', NA)
)
?fill
fill(missing_values_2, c('name', 'value'), direction = c('down', 'up'))
fill(missing_values_2, c('name', 'value'), .direction = c('down', 'up'))
fill(missing_values_2, name.direction = c('down'), value.direction = c('up'))
fill(missing_values_2, name, direction = c('down'), value, direction = c('up'))
fill(missing_values_2, name, .direction = c('down'), value, .direction = c('up'))
fill(missing_values, name, .direction = 'down')
fill(missing_values, name.direction = 'down')
fill(missing_values, 'name', direction = 'down')
fill(missing_values, 'name', direction = 'down')
fill(missing_values, 'name', .direction = 'down')
fill(missing_values_2, value, .direction = c('up'))
fill(missing_values_2, .direction = c('up'))
fill(missing_values_2, value, .direction = c('up'))
fill(missing_values_2, name, value, .direction = c('up'))
fill(missing_values_2, name, value, .direction = c('down', 'up'))
fill(missing_values_2, name, value, direction = c('down', 'up'))
fill(missing_values_2, name, value, .direction = c('down', 'up'))
fill_(missing_values_2, name, value, .direction = c('down', 'up'))
?fill_
fill_(missing_values_2, name, value, .direction = list(name = 'down', value = 'up'))
fill_(missing_values_2, name, value, .direction = 'down')
fill_(missing_values_2, .direction = 'down')
fill_(missing_values_2, name, values, .direction = 'down')
fill_(missing_values_2, name, value, .direction = 'down')
fill_(missing_values_2, name, value, .direction = c('down'))
fill(missing_values_2, name, value, .direction = 'down')
?fill
expanc(1:3, c('a','b'))
expand(1:3, c('a','b'))
expand(1:3, c('a','b'))
?expand
