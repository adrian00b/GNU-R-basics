library(tidyr)
library(dplyr)
library(tibble)

to_spread <- read.csv2('7/to_spread.csv')

# funkcja pozwalaj¹ca edytowaæ zawartosc pliku
file.edit('7/to_spread.csv')

#funkcja spread - przenosi unikalne wartosci danego atrybutu jako kolumny, wartosci nastepnego argumentu zostaja rozlozone
spread(to_spread, year, value)

spread(to_spread, country, value)

#UWAGA! co mozna przeczytac w dokumentacji, funkcja SPREAD zostala zastapiona nowa funkcja PIVOT_WIDER, ktora dziala analogicznie

pivot_wider(to_spread, names_from = year, values_from = value)

# zauwazmy ze nowa funkcja zwraca obiekt tibble, czyli nowa wersje data_frame
# mozemy tez jako wartosc podac kika wymiarow, stworza sie odpowiednie kombinacje

write.csv("", '7/to_spread2.csv')
file.edit('7/to_spread2.csv')
to_spread2 <- read.csv2('7/to_spread2.csv')


to_spread2 %>%
  pivot_wider(names_from = year, values_from = c(value, value2)) -> t1

filter(t1, country == 'A')

# funkcja gather - pewna odwrotnosc funkcji spread, zwijamy kolumny w wiersze

t2 <- spread(to_spread, country, value)
write.csv(t2, "7/to_gather.csv")

gather(t2, 'A', 'B', key = 'country', value = 'value' )

# analogicznie jak SPREAD, GATHER zostala zastapiona PIVOT_LONGER

pivot_longer(t2, cols = c('A', 'B'), names_to = 'country', values_to = 'value')


# PARSOWANIE (rozcinanie) i ROZPARSOWYWANIE (sklejanie, konkatenacja) kolumn

# CONCAT mozemy zrobic uzywajac funkcji UNITE

to_concat <- tibble( a = c('a', 'b', 'c')
        , id = 1:3)

to_concat %>%
  unite('a_id', 'a', 'id', sep = "")

# PARSOWANIE - funkcja SEPERATE

to_parse <- tibble(
  date = c('2019-01-01', '2019-08-03', '2018-12-16')
  , id = 1:3
)

to_parse %>%
  separate('date', sep = '-', into = c('year', 'month', 'day'))

# sprawdzmy co sie stanie gdy ktoras z dat nie bedzie kompletna

to_parse_2 <- tibble(
  date = c('2019-01-01', '2019-08-03', '2018-12')
  , id = 1:3
)

to_parse_2 %>%
  separate('date', sep = '-', into = c('year', 'month', 'day'))
# mozemy dodac atrybut fill ktory okresli czy uzupelnia od lewej czy od prawej oraz czy ma byc wyswietlane ostrzezenie


# MISSING VALUES

missing_values <- tibble (
  id = 1:6
  , name = c('a', 'b', 'c', NA, 'e', NA)
)

# drop_na - usuwanie krotek z pustymi wartosciami
drop_na(missing_values)

# zastapywanie pustych wartosci danego atrybutu
replace_na(missing_values, list(name = 'NULL'))

fill(missing_values, 'name', .direction = 'down')

missing_values_2 <- add_column(missing_values, value = c(11, 12, NA, 14, NA, 16))

fill(missing_values_2, name, value, .direction = 'down')
